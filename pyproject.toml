[project]
name = "mixture-agents-models"
version = "0.1.0"
description = "Python translation of Brody lab's Mixture-of-Agents Hidden Markov Models for behavioral data analysis"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.10"
dependencies = [
    "numpy",
    "scipy",
    "pandas",
    "scikit-learn",
    "matplotlib",
    "dynamicroutingtask>=0.1.129",
    "typing-extensions>=4.14.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.0.280",
]

[project.urls]
Repository = "https://github.com/bjhardcastle/mixture-agents-models"


[build-system]
requires = ["setuptools>=61", "wheel"]
build-backend = "setuptools.build_meta"

[project.scripts]
task = "poethepoet:main"

[dependency-groups]
task_runner = ["poethepoet>=0.33.1"]
linting = ["black>=25.1.0", "isort>=6.0.1", "ruff>=0.11.2"]
testing = ["pytest>=7.4.0", "mypy>=1.4.1", "pytest-cov>=4.1.0"]
bump = [
    "bump-my-version>=1.1.1",
    "git-changelog>=2.5.3",
]
pynwb = [
    "hdmf-zarr==0.11.0",
    "pynwb==3.0.0",
]

[tool.uv]
package = true
default-groups = "all"

[tool.bumpversion]
tag = true
allow_dirty = true
commit = true
commit_args = "-a"
message = "Bump version: {current_version} â†’ {new_version} [skip actions]"
pre_commit_hooks = [
    "uv lock --upgrade-package lazynwb",
    "git-changelog -o CHANGELOG.md",
    "uv build",
    "uv publish",
]
post_commit_hooks = [
    "git push origin main",
    "git push --tags",
]

[tool.poe.tasks]
mypy = "mypy src --install-types --non-interactive"
pytest = "pytest --cov-report term-missing:skip-covered --cov-report=html"
test = ["pytest"]
ruff = "ruff check src --fix-only"
black = "black src"
format = ["ruff", "black"]
bump_pub_tag = "bump-my-version bump patch"
release = ["format", "bump_pub_tag"]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
lazynwb = ["py.typed"]

[tool.setuptools]
license-files = ["LICENSE"]

[tool.black]
# line-length = 100
target-version = ["py39", "py310", "py311"]

[tool.ruff]
line-length = 100
select = [
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "E",      # pycodestyle
    "F",      # pyflakes
    "PGH",    # pygrep-hooks
    "RUF",    # ruff
    "W",      # pycodestyle
    "YTT",    # flake8-2020
    "ANN",
    "C",
    "I",
    "RUF100",
    "N",
    "UP",
]
# extend-ignore = ["B018", "B019"]
src = ["src"]
extend-exclude = ["tests/fixtures"]
target-version = "py39"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["lazynwb"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
skip_covered = true
show_missing = true
skip_empty = true
exclude_also = [
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@(abc.)?abstractmethod",
    "@typing.runtime_checkable",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    # "--doctest-modules",
    "--ignore-glob=*scripts*,*examples*,*docs*",
    "--cov",
    "--cov-report=html",
    "--cov-config=pyproject.toml",
    "--doctest-glob=*README.md",
    "-x",
    # "-n=auto", for use with pytest-xdist
]
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]
testpaths = ["src", "tests"]

[tool.mypy]
check_untyped_defs = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
disallow_any_unimported = false
warn_return_any = false
warn_unused_ignores = true
no_implicit_optional = true
show_error_codes = true
ignore_missing_imports = true
implicit_reexport = false
exclude = ["src/lazynwb/scripts"]

[tool.isort]
profile = "black"
atomic = true
skip_glob = ["*/setup.py"]
filter_files = true
known_first_party = ["lazynwb"]
